/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  SPVVerifier,
  SPVVerifierInterface,
} from "../../contracts/SPVVerifier";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifier",
        type: "address",
      },
    ],
    name: "setVerifier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "spvVerifierImpl",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_newState",
        type: "bytes32",
      },
    ],
    name: "syncState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50600280546001600160a01b03191633179055610394806100326000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638e760afe116100505780638e760afe146100f6578063b130812214610119578063c19d93fb1461012c57600080fd5b80632d0f85db146100775780635437988d146100c15780638da5cb5b146100d6575b600080fd5b6001546100979073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100d46100cf3660046102af565b610143565b005b6002546100979073ffffffffffffffffffffffffffffffffffffffff1681565b6101096101043660046102ec565b6101db565b60405190151581526020016100b8565b6100d461012736600461035e565b610259565b61013560005481565b6040519081526020016100b8565b60025473ffffffffffffffffffffffffffffffffffffffff163314610194576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600154604051600091829173ffffffffffffffffffffffffffffffffffffffff9091169061020c9086908690610377565b6000604051808303816000865af19150503d8060008114610249576040519150601f19603f3d011682016040523d82523d6000602084013e61024e565b606091505b509095945050505050565b60025473ffffffffffffffffffffffffffffffffffffffff1633146102aa576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600055565b6000602082840312156102c157600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146102e557600080fd5b9392505050565b600080602083850312156102ff57600080fd5b823567ffffffffffffffff8082111561031757600080fd5b818501915085601f83011261032b57600080fd5b81358181111561033a57600080fd5b86602082850101111561034c57600080fd5b60209290920196919550909350505050565b60006020828403121561037057600080fd5b5035919050565b818382376000910190815291905056fea164736f6c6343000817000a";

type SPVVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SPVVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SPVVerifier__factory extends ContractFactory {
  constructor(...args: SPVVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SPVVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SPVVerifier__factory {
    return super.connect(runner) as SPVVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SPVVerifierInterface {
    return new Interface(_abi) as SPVVerifierInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SPVVerifier {
    return new Contract(address, _abi, runner) as unknown as SPVVerifier;
  }
}
