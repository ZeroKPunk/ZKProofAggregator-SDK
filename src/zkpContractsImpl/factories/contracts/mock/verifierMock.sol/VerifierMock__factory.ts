/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  VerifierMock,
  VerifierMockInterface,
} from "../../../../contracts/mock/verifierMock.sol/VerifierMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "salt",
        type: "string",
      },
    ],
    name: "getVerifyCalldata",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102da806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638e760afe1461003b578063a4c3486b14610066575b600080fd5b61005161004936600461019d565b600192915050565b60405190151581526020015b60405180910390f35b61007961007436600461019d565b610086565b60405161005d91906101df565b6060828260405160200161009b92919061024c565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526100d6916024016101df565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8e760afe00000000000000000000000000000000000000000000000000000000179052905092915050565b60008083601f84011261016657600080fd5b50813567ffffffffffffffff81111561017e57600080fd5b60208301915083602082850101111561019657600080fd5b9250929050565b600080602083850312156101b057600080fd5b823567ffffffffffffffff8111156101c757600080fd5b6101d385828601610154565b90969095509350505050565b60006020808352835180602085015260005b8181101561020d578581018301518582016040015282016101f1565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60408152600560408201527f70726f6f66000000000000000000000000000000000000000000000000000000606082015260806020820152816080820152818360a0830137600081830160a090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010191905056fea164736f6c6343000817000a";

type VerifierMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VerifierMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VerifierMock__factory extends ContractFactory {
  constructor(...args: VerifierMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      VerifierMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): VerifierMock__factory {
    return super.connect(runner) as VerifierMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VerifierMockInterface {
    return new Interface(_abi) as VerifierMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): VerifierMock {
    return new Contract(address, _abi, runner) as unknown as VerifierMock;
  }
}
