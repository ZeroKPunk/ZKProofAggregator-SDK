/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { PayableOverrides } from "../../common";
import type {
  ZKAVerifier,
  ZKAVerifierInterface,
} from "../../contracts/ZKAVerifier";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "VerifyFail",
    type: "error",
  },
  {
    inputs: [],
    name: "ZKAFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZKVerifier",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "fetchProofKey",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_ZKAFactory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_ZKVerifier",
        type: "address",
      },
    ],
    name: "initializer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "zkProof",
        type: "bytes",
      },
    ],
    name: "zkpVerify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526104a6806100136000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063a53d156911610050578063a53d1569146100cb578063b0a6217b146100eb578063eb8e38eb146100fe57600080fd5b80636dd6fb301461006c5780638067b52a146100b6575b600080fd5b60005461008c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100c96100c436600461034e565b61011f565b005b60015461008c9073ffffffffffffffffffffffffffffffffffffffff1681565b6100c96100f93660046103e9565b610252565b61011161010c36600461034e565b610319565b6040519081526020016100ad565b60015460405160009173ffffffffffffffffffffffffffffffffffffffff1690620927c090610151908690869061041c565b60006040518083038160008787f1925050503d806000811461018f576040519150601f19603f3d011682016040523d82523d6000602084013e610194565b606091505b50909150506001811515146101d5576040517ff2816fcc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005473ffffffffffffffffffffffffffffffffffffffff166357a9744c6101fd8585610319565b6040518263ffffffff1660e01b815260040161021b91815260200190565b600060405180830381600087803b15801561023557600080fd5b505af1158015610249573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1615158061028f575060015473ffffffffffffffffffffffffffffffffffffffff1615155b156102c6576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560018054929093169116179055565b60008282306040516020016103309392919061042c565b60405160208183030381529060405280519060200120905092915050565b6000806020838503121561036157600080fd5b823567ffffffffffffffff8082111561037957600080fd5b818501915085601f83011261038d57600080fd5b81358181111561039c57600080fd5b8660208285010111156103ae57600080fd5b60209290920196919550909350505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146103e457600080fd5b919050565b600080604083850312156103fc57600080fd5b610405836103c0565b9150610413602084016103c0565b90509250929050565b8183823760009101908152919050565b6040815282604082015282846060830137600060608483010152600060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f860116830101905073ffffffffffffffffffffffffffffffffffffffff8316602083015294935050505056fea164736f6c6343000817000a";

type ZKAVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZKAVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZKAVerifier__factory extends ContractFactory {
  constructor(...args: ZKAVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: PayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ZKAVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ZKAVerifier__factory {
    return super.connect(runner) as ZKAVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKAVerifierInterface {
    return new Interface(_abi) as ZKAVerifierInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ZKAVerifier {
    return new Contract(address, _abi, runner) as unknown as ZKAVerifier;
  }
}
