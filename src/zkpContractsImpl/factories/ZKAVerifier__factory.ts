/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { ZKAVerifier, ZKAVerifierInterface } from "../ZKAVerifier";

const _abi = [
  {
    inputs: [],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "ZKAFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ZKVerifier",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_ZKAFactory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_ZKVerifier",
        type: "address",
      },
    ],
    name: "initializer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "zkProof",
        type: "bytes",
      },
    ],
    name: "zkpVerify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061051a806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636dd6fb30146100515780638067b52a1461009b578063a53d1569146100be578063b0a6217b146100de575b600080fd5b6000546100719073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ae6100a9366004610380565b6100f3565b6040519015158152602001610092565b6001546100719073ffffffffffffffffffffffffffffffffffffffff1681565b6100f16100ec36600461041b565b6102b9565b005b600154604051600091829173ffffffffffffffffffffffffffffffffffffffff90911690610124908690869061044e565b6000604051808303816000865af19150503d8060008114610161576040519150601f19603f3d011682016040523d82523d6000602084013e610166565b606091505b5050600054604080516020601f880181900481028201810190925286815292935073ffffffffffffffffffffffffffffffffffffffff909116916357a9744c918790879081908401838280828437600092019190915250506040517feb8e38eb00000000000000000000000000000000000000000000000000000000815273__$0488f403ee5cf126201554a1333f0cecfa$__9363eb8e38eb935061020f92509060040161045e565b602060405180830381865af415801561022c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025091906104cb565b6040518263ffffffff1660e01b815260040161026e91815260200190565b6020604051808303816000875af115801561028d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b191906104e4565b509392505050565b60005473ffffffffffffffffffffffffffffffffffffffff161515806102f6575060015473ffffffffffffffffffffffffffffffffffffffff1615155b1561032d576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560018054929093169116179055565b6000806020838503121561039357600080fd5b823567ffffffffffffffff808211156103ab57600080fd5b818501915085601f8301126103bf57600080fd5b8135818111156103ce57600080fd5b8660208285010111156103e057600080fd5b60209290920196919550909350505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461041657600080fd5b919050565b6000806040838503121561042e57600080fd5b610437836103f2565b9150610445602084016103f2565b90509250929050565b8183823760009101908152919050565b60006020808352835180602085015260005b8181101561048c57858101830151858201604001528201610470565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000602082840312156104dd57600080fd5b5051919050565b6000602082840312156104f657600080fd5b8151801515811461050657600080fd5b939250505056fea164736f6c6343000817000a";

type ZKAVerifierConstructorParams =
  | [linkLibraryAddresses: ZKAVerifierLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZKAVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class ZKAVerifier__factory extends ContractFactory {
  constructor(...args: ZKAVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        ZKAVerifier__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: ZKAVerifierLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$0488f403ee5cf126201554a1333f0cecfa\\$__", "g"),
      linkLibraryAddresses[
        "contracts/library/ZKAVerifierLib.sol:ZKAVerifierLib"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ZKAVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ZKAVerifier__factory {
    return super.connect(runner) as ZKAVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZKAVerifierInterface {
    return new Interface(_abi) as ZKAVerifierInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ZKAVerifier {
    return new Contract(address, _abi, runner) as unknown as ZKAVerifier;
  }
}

export interface ZKAVerifierLibraryAddresses {
  ["contracts/library/ZKAVerifierLib.sol:ZKAVerifierLib"]: string;
}
