/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IZKAFactory,
  IZKAFactoryInterface,
} from "../../../contracts/interface/IZKAFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_zkVerifier",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_zkpVerifierName",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "_url",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "_deployer",
        type: "address",
      },
    ],
    name: "newZKAVerifierInfo",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "_proofKey",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "_saveTimestamp",
        type: "uint64",
      },
    ],
    name: "proofToStorageInfo",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_zkpVerifierName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_url",
        type: "string",
      },
    ],
    name: "computeZKAVerifierAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_zkpVerifierName",
        type: "string",
      },
      {
        internalType: "string",
        name: "_url",
        type: "string",
      },
      {
        internalType: "address",
        name: "_deployer",
        type: "address",
      },
      {
        internalType: "address",
        name: "_zkpVerifierAddress",
        type: "address",
      },
    ],
    name: "deployZKAVerifier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fetchAllZKAVerifiers",
    outputs: [
      {
        internalType: "address[]",
        name: "allVerifiers",
        type: "address[]",
      },
      {
        components: [
          {
            internalType: "string",
            name: "zkpVerifierName",
            type: "string",
          },
          {
            internalType: "string",
            name: "url",
            type: "string",
          },
          {
            internalType: "address",
            name: "deployer",
            type: "address",
          },
          {
            internalType: "uint64",
            name: "deployTimestamp",
            type: "uint64",
          },
        ],
        internalType: "struct IZKAFactory.VerifierMeta[]",
        name: "allMetas",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implZKAVerifier",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proofKey",
        type: "bytes32",
      },
    ],
    name: "proofInStorage",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proofKey",
        type: "bytes32",
      },
    ],
    name: "proofToStorage",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_implementation",
        type: "address",
      },
    ],
    name: "setimplZKAVerifier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IZKAFactory__factory {
  static readonly abi = _abi;
  static createInterface(): IZKAFactoryInterface {
    return new Interface(_abi) as IZKAFactoryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IZKAFactory {
    return new Contract(address, _abi, runner) as unknown as IZKAFactory;
  }
}
